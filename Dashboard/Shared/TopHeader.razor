@using System.Timers
@inject DashboardStore Store

<header class="main-header">
    <NavLink class="logo" href="" Match="NavLinkMatch.All">
        <Icon Name="IconName.Dashboard"></Icon> H
    </NavLink>
    <div class="top-header">
        <div class="header-content">
            <ul class="header-nav">
                <li class="header-nav-item">
                    <a href="#">
                        <WeatherComponent CurrentCondition="@CurrentCondition"/>
                    </a>
                </li>
                <li class="header-nav-item">
                    <a href="#">
                        <TimeComponent />
                    </a>
                </li>
            </ul>
        </div>
    </div>
</header>

@functions {
    public Weather CurrentCondition { get; set; }
    private Timer timer;

    protected override async Task OnInitAsync()
    {
        base.OnInit();

        Store.RegisterObserver((sender) => {
            if (sender.Weather.ContainsKey(sender.Home)) {
                this.CurrentCondition = sender.Weather[sender.Home].Last();
                this.StateHasChanged();
            }
        });

        CurrentCondition = new Weather()
        {
            Temperature = 0,
            ConditionCode = 0
        };

        timer = new Timer(1 * 1000 * 60 * 60);
        timer.AutoReset = true;
        timer.Elapsed += new ElapsedEventHandler(async (sender, args) =>
        {
            await Store.GetWeather();
        });

        this.timer.Start();

        await Store.GetWeather();
    }
}
