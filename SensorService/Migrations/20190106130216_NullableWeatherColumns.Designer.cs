// <auto-generated />
using System;
using Common.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace SensorService.Migrations
{
    [DbContext(typeof(SensorsContext))]
    [Migration("20190106130216_NullableWeatherColumns")]
    partial class NullableWeatherColumns
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Entities.HumiditySensorReading", b =>
                {
                    b.Property<int>("SensorReadingId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Reading");

                    b.Property<int>("SensorId");

                    b.Property<DateTime>("Time");

                    b.HasKey("SensorReadingId");

                    b.HasIndex("SensorId");

                    b.ToTable("HumiditySensorReadings");
                });

            modelBuilder.Entity("Domain.Entities.Sensor", b =>
                {
                    b.Property<int>("SensorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.HasKey("SensorId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("Domain.Entities.TemperatureSensorReading", b =>
                {
                    b.Property<int>("SensorReadingId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Reading");

                    b.Property<int>("SensorId");

                    b.Property<DateTime>("Time");

                    b.HasKey("SensorReadingId");

                    b.HasIndex("SensorId");

                    b.ToTable("TemperatureSensorReadings");
                });

            modelBuilder.Entity("Domain.Entities.WeatherSensorReading", b =>
                {
                    b.Property<int>("SensorReadingId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Condition");

                    b.Property<int?>("ConditionCode");

                    b.Property<double?>("Humidity");

                    b.Property<string>("IconURL");

                    b.Property<double>("MaximumTemperature");

                    b.Property<double>("MinimumTemperature");

                    b.Property<double?>("Pressure");

                    b.Property<int>("SensorId");

                    b.Property<double>("Temperature");

                    b.Property<DateTime>("Time");

                    b.HasKey("SensorReadingId");

                    b.HasIndex("SensorId");

                    b.ToTable("WeatherSensorReading");
                });

            modelBuilder.Entity("Domain.Entities.HumiditySensorReading", b =>
                {
                    b.HasOne("Domain.Entities.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.TemperatureSensorReading", b =>
                {
                    b.HasOne("Domain.Entities.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Entities.WeatherSensorReading", b =>
                {
                    b.HasOne("Domain.Entities.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
