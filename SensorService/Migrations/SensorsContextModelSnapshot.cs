// <auto-generated />
using System;
using Common.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace SensorService.Migrations
{
    [DbContext(typeof(SensorsContext))]
    partial class SensorsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Common.Models.HumiditySensorReading", b =>
                {
                    b.Property<int>("SensorReadingId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Reading");

                    b.Property<int>("SensorId");

                    b.Property<DateTime>("Time");

                    b.HasKey("SensorReadingId");

                    b.HasIndex("SensorId");

                    b.ToTable("HumiditySensorReadings");
                });

            modelBuilder.Entity("Common.Models.Sensor", b =>
                {
                    b.Property<int>("SensorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.HasKey("SensorId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("Common.Models.TemperatureSensorReading", b =>
                {
                    b.Property<int>("SensorReadingId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Reading");

                    b.Property<int>("SensorId");

                    b.Property<DateTime>("Time");

                    b.HasKey("SensorReadingId");

                    b.HasIndex("SensorId");

                    b.ToTable("TemperatureSensorReadings");
                });

            modelBuilder.Entity("Common.Models.HumiditySensorReading", b =>
                {
                    b.HasOne("Common.Models.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Common.Models.TemperatureSensorReading", b =>
                {
                    b.HasOne("Common.Models.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
